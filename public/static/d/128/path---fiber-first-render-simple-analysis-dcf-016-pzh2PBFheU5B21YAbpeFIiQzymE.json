{"data":{"site":{"siteMetadata":{"title":"秋风的博客","author":"杨拓"}},"markdownRemark":{"id":"7bb26b14-40db-5b78-b2e4-a1a7553a757b","html":"<!-- # React的第一次渲染过程浅析 -->\n<p>本篇文章暂时讨论<code class=\"language-text\">Sync</code>模式（同步）,源码为<a href=\"https://github.com/facebook/react/tree/v16.9.0\">16.9</a>，部分源码内容不讨论（hooks classComponent等等相关的代码）。</p>\n<h2>a demo</h2>\n<p>先看一段react的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button\n        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l am button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        add\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Counter count<span class=\"token operator\">=</span><span class=\"token string\">\"12\"</span> key<span class=\"token operator\">=</span><span class=\"token string\">\"12\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>jsx语法可以通过<a href=\"https://babeljs.io/\"><code class=\"language-text\">babel</code></a>对应的jsx插件需要转义成可执行的代码（<a href=\"https://babeljs.io/repl\">try it out</a>）， 上述代码<code class=\"language-text\">&lt;App /&gt;</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 转义后的代码</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>CounterButton<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"12\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 结果</span>\n<span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>react<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ref<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> ƒ <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>创建fiberRoot</h2>\n<p>传入<code class=\"language-text\">ReactDOM.render</code>函数的三个参数<code class=\"language-text\">element</code>、 <code class=\"language-text\">container</code>、<code class=\"language-text\">callback</code></p>\n<p><code class=\"language-text\">container</code>的<code class=\"language-text\">_reactRootContainer</code>属性在第一次创建是不存在的，先要创建它</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactDOM.js</span>\n<span class=\"token keyword\">let</span> rootSibling<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rootSibling <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>lastChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>rootSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>先将<code class=\"language-text\">container</code>即我们传入<code class=\"language-text\">div#app</code>的所有子节点删除 得到的结果:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// root</span>\n<span class=\"token punctuation\">{</span>\n  _internalRoot<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    current<span class=\"token punctuation\">:</span> FiberNode<span class=\"token punctuation\">,</span>\n    containerInfo<span class=\"token punctuation\">:</span> div#app<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">current</code> 指向的是 root fiber节点, containerInfo 执行 dom元素 id为app的div</p>\n<p><strong>unbatchedUpdates</strong></p>\n<p>接着使用<code class=\"language-text\">unbatchedUpdates</code>调用<code class=\"language-text\">updateContainer</code>， <code class=\"language-text\">unbatchedUpdates</code>来自调度系统<code class=\"language-text\">ReactFiberWorkLoop</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberWorkLoop.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">unbatchedUpdates</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> prevExecutionContext <span class=\"token operator\">=</span> executionContext<span class=\"token punctuation\">;</span>\n  executionContext <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>BatchedContext<span class=\"token punctuation\">;</span>\n  executionContext <span class=\"token operator\">|=</span> LegacyUnbatchedContext<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    executionContext <span class=\"token operator\">=</span> prevExecutionContext<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>executionContext <span class=\"token operator\">===</span> NoContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">flushSyncCallbackQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>全局变量<code class=\"language-text\">executionContext</code>代表当前的执行上下文, 初始化为 <code class=\"language-text\">NoContent</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberWorkLoop.js</span>\n\n<span class=\"token keyword\">const</span> NoContext <span class=\"token operator\">=</span> <span class=\"token comment\">/*                    */</span> <span class=\"token number\">0b000000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> BatchedContext <span class=\"token operator\">=</span> <span class=\"token comment\">/*               */</span> <span class=\"token number\">0b000001</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> EventContext <span class=\"token operator\">=</span> <span class=\"token comment\">/*                 */</span> <span class=\"token number\">0b000010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> DiscreteEventContext <span class=\"token operator\">=</span> <span class=\"token comment\">/*         */</span> <span class=\"token number\">0b000100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> LegacyUnbatchedContext <span class=\"token operator\">=</span> <span class=\"token comment\">/*       */</span> <span class=\"token number\">0b001000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> RenderContext <span class=\"token operator\">=</span> <span class=\"token comment\">/*                */</span> <span class=\"token number\">0b010000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CommitContext <span class=\"token operator\">=</span> <span class=\"token comment\">/*                */</span> <span class=\"token number\">0b100000</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">executionContext &amp;= ~BatchedContext</code>代表什么含义尼？</p>\n<p>首先 <code class=\"language-text\">&amp;</code> 操作当且当两个位上都为1的时候返回1，<code class=\"language-text\">|</code> 只要有一位为<code class=\"language-text\">1</code>，返回<code class=\"language-text\">1</code></p>\n<p><code class=\"language-text\">executionContext</code>则是这些Context组合的结果:<br>\n将当前上下文添加<code class=\"language-text\">Render</code>：</p>\n<p><code class=\"language-text\">executionContext |= RenderContext</code> </p>\n<p>判断当前是否处于<code class=\"language-text\">Render</code>阶段 </p>\n<p><code class=\"language-text\">executionContext &amp;= RenderContext === NoContext</code></p>\n<p>去除<code class=\"language-text\">Render</code>:</p>\n<p><code class=\"language-text\">executionContext &amp;= ~RenderContext</code></p>\n<p><code class=\"language-text\">executionContext &amp;= ~BatchedContext</code>则代表把当前上下文的<code class=\"language-text\">BatchedContext</code>标志位置为false，表示当前为非批量更新</p>\n<p>在react源码中有很多类似的位运算，比如effectTag，workTag。</p>\n<h2>reconciler（调和）</h2>\n<p><strong>updateContainer</strong></p>\n<p>计算当前时间和当前的过期时间，因本文只讨论同步模式所以这里的<code class=\"language-text\">expirationTime</code>为</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberExpirationTime.js</span>\n<span class=\"token keyword\">const</span> Sync <span class=\"token operator\">=</span> <span class=\"token constant\">MAX_SIGNED_31_BIT_INT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ReactFiberWorkLoop.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">computeExpirationForFiber</span><span class=\"token punctuation\">(</span>\n  currentTime<span class=\"token punctuation\">,</span>\n  fiber<span class=\"token punctuation\">,</span>\n  suspenseConfig<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mode <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>mode\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">&amp;</span> BatchedMode<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> NoMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Sync\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">expirationTime</code>越大，代表优先级越高，所以同步模式拥有最高的优先级。</p>\n<p>在<code class=\"language-text\">updateContainerAtExpirationTime</code>创建于<code class=\"language-text\">context</code>相关内容，后续有专门文章介绍<code class=\"language-text\">context</code>，这里先不讨论。</p>\n<p><strong>scheduleRootUpdate</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberReconciler.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">scheduleRootUpdate</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">,</span>\n  element<span class=\"token punctuation\">,</span>\n  expirationTime<span class=\"token punctuation\">,</span>\n  suspenseConfig<span class=\"token punctuation\">,</span>\n  callback<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> update <span class=\"token operator\">=</span> <span class=\"token function\">createUpdate</span><span class=\"token punctuation\">(</span>expirationTime<span class=\"token punctuation\">,</span> suspenseConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  update<span class=\"token punctuation\">.</span>payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  callback <span class=\"token operator\">=</span> callback <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> callback<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callback <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    update<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">enqueueUpdate</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">scheduleWork</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> expirationTime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>创建<code class=\"language-text\">update</code>，将callback添加到update上。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  callback<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  expirationTime<span class=\"token punctuation\">:</span> <span class=\"token number\">1073741823</span>\n  next<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  nextEffect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>element<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>react<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span>\n    key<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n    props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    ref<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n    type<span class=\"token punctuation\">:</span> ƒ <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  priority<span class=\"token punctuation\">:</span> <span class=\"token number\">97</span>\n  suspenseConfig<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  tag<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再更新添加到root fiber的更新队列上，指的一提的是这里的更新队列<code class=\"language-text\">updateQueue</code>也采用了双缓冲技术，两条<code class=\"language-text\">updateQueue</code>通过<code class=\"language-text\">alternate</code>属性\n相互引用。这个链表大致为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  baseState<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  firstCapturedEffect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  firstCapturedUpdate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  firstEffect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  firstUpdate<span class=\"token punctuation\">:</span> update\n  lastCapturedEffect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  lastCapturedUpdate<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  lastEffect<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  lastUpdate<span class=\"token punctuation\">:</span> update\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>调用<code class=\"language-text\">scheduleWork</code>进入到调度阶段。</p>\n<h2>scheduleWork（调度阶段）</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberWorkLoop.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">scheduleUpdateOnFiber</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">markUpdateTimeFromFiberToRoot</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expirationTime <span class=\"token operator\">===</span> Sync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>executionContext <span class=\"token operator\">&amp;</span> LegacyUnbatchedContext<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> NoContext <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token punctuation\">(</span>executionContext <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>RenderContext <span class=\"token operator\">|</span> CommitContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> NoContext\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> callback <span class=\"token operator\">=</span> <span class=\"token function\">renderRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> Sync<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>callback <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        callback <span class=\"token operator\">=</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>进入调度阶段，首先调用<code class=\"language-text\">markUpdateTimeFromFiberToRoot</code>将fiber上的更新时间，此时的fiber树只有一个root fiber光杆司令。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberWorkLoop.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">markUpdateTimeFromFiberToRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">.</span>expirationTime <span class=\"token operator\">&lt;</span> expirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fiber<span class=\"token punctuation\">.</span>expirationTime <span class=\"token operator\">=</span> expirationTime<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">let</span> alternate <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fiber<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">===</span> HostRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    root <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>stateNode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> root\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里返回的root是个fiberRoot类型的节点。</p>\n<p>继续往下，条件<code class=\"language-text\">expirationTime === Sync</code>符合  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">executionContext <span class=\"token operator\">&amp;</span> LegacyUnbatchedContext<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> NoContext <span class=\"token operator\">&amp;&amp;</span>\nexecutionContext <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>RenderContext <span class=\"token operator\">|</span> CommitContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> NoContext</code></pre></div>\n<p>这里的两个位运算，在<code class=\"language-text\">unbatchedUpdates</code>方法内将初始化的上下文<code class=\"language-text\">NoContext</code>添加了<code class=\"language-text\">LegacyUnbatchedContext</code>上下文，所以这里得到的结果是真。</p>\n<p><strong>renderRoot</strong></p>\n<p>renderRoot阶段只要进行两部分工作：一个是workLoop循环，即render阶段 另一个为commitRoot，commit阶段</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberExpirationTime.js</span>\n<span class=\"token keyword\">const</span> NoWork <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\">// ReactFiberWorkLoop.js</span>\n<span class=\"token keyword\">let</span> workInProgressRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> renderExpirationTime <span class=\"token operator\">=</span> NoWork\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!==</span> workInProgressRoot <span class=\"token operator\">||</span> expirationTime <span class=\"token operator\">!==</span> renderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">prepareFreshStack</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n  <span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">/* renderRoot-code-branch-01 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此时的 <code class=\"language-text\">workInProgressRoot</code>和<code class=\"language-text\">renderExpirationTime</code>都处于初始状态。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">prepareFreshStack</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token punctuation\">.</span>finishedWork <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  root<span class=\"token punctuation\">.</span>finishedExpirationTime <span class=\"token operator\">=</span> NoWork<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n  workInProgressRoot <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n  workInProgress <span class=\"token operator\">=</span> <span class=\"token function\">createWorkInProgress</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> expirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  renderExpirationTime <span class=\"token operator\">=</span> expirationTime<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">prepareFreshStack</code>顾名思义，准备一个新生的堆栈环境。<br>\n首先将<code class=\"language-text\">finishedWork</code>相关的变量初始化。<br>\n将<code class=\"language-text\">root</code>赋给全局变量<code class=\"language-text\">workInProgressRoot</code> 将<code class=\"language-text\">expirationTime</code>赋给<code class=\"language-text\">renderExpirationTime</code><br>\n为root.current即root fiber节点创建一个<code class=\"language-text\">workInProgress</code>节点，并将该节点赋给全局变量<code class=\"language-text\">workInProgress</code>。<code class=\"language-text\">fiber</code>节点也是应用了双缓冲，两个fiber节点通过<code class=\"language-text\">alternate</code>属性保存了对方的引用 在更新的过程中操作的是workInProgress节点。调度结束时 <code class=\"language-text\">workInProgress fiber</code>会替代<code class=\"language-text\">current fiber</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* renderRoot-code-branch-01 */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> prevExecutionContext <span class=\"token operator\">=</span> executionContext<span class=\"token punctuation\">;</span>\n  executionContext <span class=\"token operator\">|=</span> RenderContext<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* hooks-related ** start */</span>\n  <span class=\"token keyword\">let</span> prevDispatcher <span class=\"token operator\">=</span> ReactCurrentDispatcher<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevDispatcher <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    prevDispatcher <span class=\"token operator\">=</span> ContextOnlyDispatcher<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  ReactCurrentDispatcher<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> ContextOnlyDispatcher<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* hooks-related ** end */</span>\n\n  <span class=\"token comment\">/* workLoop */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此时的<code class=\"language-text\">workInProgress</code>为刚创建的那个节点。接着为当前的上下文添加<code class=\"language-text\">RenderContext</code>，标志着进入render阶段。\n<code class=\"language-text\">hooks-related</code>这部分代码是与hooks先关的代码，在这过程中用户调用hooks相关的API都不是在<code class=\"language-text\">FunctionComponent</code>的内部，所以都会报错。</p>\n<h2>render阶段</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoopSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    workInProgress <span class=\"token operator\">=</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* workLoop */</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isSync<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">workLoopSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>workLoop过程是一个递归的过程 从root阶段向下遍历到叶子节点，再从叶子节点执行一些遍历的逻辑最后返回到root节点，这次过程执行<code class=\"language-text\">beginWork</code>，<code class=\"language-text\">completeWork</code>等操作，\n在此过程中创建fiber节点组装fiber树，创建对应的dom节点等等。</p>\n<p>文章开始的代码workLoop过程大致如下：</p>\n<!-- ![workLoop gif](./static/workLoop-fiber.gif) -->\n<p><img src=\"/workLoop-fiber-391fafb4257dcdaffeb05bf44a83a8af.gif\" alt=\"workLoop gif\"></p>\n<p>一个简单的线上demo，根据代码模拟workLoop执行过程<a href=\"https://fall-wind.github.io/my-react-fiber-home/\">地址</a></p>\n<p>让我们开启workLoop之旅吧！</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>unitOfWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> unitOfWork<span class=\"token punctuation\">.</span>alternate\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> unitOfWork<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span>\n  unitOfWork<span class=\"token punctuation\">.</span>memoizedProps <span class=\"token operator\">=</span> unitOfWork<span class=\"token punctuation\">.</span>pendingProps\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    next <span class=\"token operator\">=</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>unitOfWork<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> next\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这个循环过程 beginWork顺着element树的向下深度遍历 当遍历到叶子节点时，即next为null时， completeUnitOfWork则会定位next的值：</p>\n<ol>\n<li>当前节点 是否有兄弟节点， 有，返回进行下一次beginWork；无则转到2</li>\n<li>当前节点置为 父节点，父节点是否存在 存在，转到1；否则返回null</li>\n</ol>\n<p>当然这两个过程所得工作不仅仅就是这样。</p>\n<h3>beginWork</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberBeginWork.js</span>\n<span class=\"token keyword\">let</span> didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> oldProps <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>memoizedProps\n    <span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>pendingProps\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps <span class=\"token operator\">!==</span> newProps <span class=\"token operator\">||</span> <span class=\"token function\">hasLegacyContextChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>updateExpirationTime <span class=\"token operator\">&lt;</span> renderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  workInProgress<span class=\"token punctuation\">.</span>expirationTime <span class=\"token operator\">=</span> NoWork<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> HostRoot<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">updateHostRoot</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>root fiber是存在<code class=\"language-text\">current fiber</code>的，但此时的<code class=\"language-text\">oldProps</code>和<code class=\"language-text\">newProps</code>都为null。虽然这里不讨论<code class=\"language-text\">context</code>，但是从</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if (oldProps !== newProps || hasLegacyContextChanged()) {\n  didReceiveUpdate = true;\n}</code></pre></div>\n<p>我们可以看出旧的<code class=\"language-text\">context</code> API的低效。</p>\n<p>在进入到<code class=\"language-text\">beginWork</code>之前先将<code class=\"language-text\">expirationTime</code>置为<code class=\"language-text\">NoWork</code></p>\n<p><strong>beginWork HostRoot</strong>\nroot fiber对应的更新为<code class=\"language-text\">HostRoot</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberBeginWork.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateHostRoot</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> updateQueue <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>updateQueue<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nextProps <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>pendingProps<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> prevState <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> prevChildren <span class=\"token operator\">=</span> prevState <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> prevState<span class=\"token punctuation\">.</span>element <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">processUpdateQueue</span><span class=\"token punctuation\">(</span>\n    workInProgress<span class=\"token punctuation\">,</span>\n    updateQueue<span class=\"token punctuation\">,</span>\n    nextProps<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    renderExpirationTime<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> nextState <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>memoizedState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nextChildren <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextChildren <span class=\"token operator\">===</span> prevChildren<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>stateNode\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>current <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> current<span class=\"token punctuation\">.</span>child <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>hydrate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span>\n      current<span class=\"token punctuation\">,</span>\n      workInProgress<span class=\"token punctuation\">,</span>\n      nextChildren<span class=\"token punctuation\">,</span>\n      renderExpirationTime<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在<code class=\"language-text\">scheduleRootUpdate</code>创建的更新队列我们创建了一个更新队列，里面有一条更新。</p>\n<p><code class=\"language-text\">processUpdateQueue</code>对于所做的将队列清空 将<code class=\"language-text\">update</code>的<code class=\"language-text\">payload</code>合并到<code class=\"language-text\">updateQueue</code>的<code class=\"language-text\">baseState</code>属性 同时添加到workInProgress节点的<code class=\"language-text\">memoizedState</code>上\n所以<code class=\"language-text\">nextChildren</code>就是<code class=\"language-text\">memoizedState</code>的<code class=\"language-text\">element</code>属性了。也就是</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  $$<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>react<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  ref<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  type<span class=\"token punctuation\">:</span> ƒ <span class=\"token function\">App</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接着<code class=\"language-text\">root.hydrate</code>这个判断是服务端渲染相关的代码，这里不涉及，所以走另一个分支</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberBeginWork.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> nextChildren<span class=\"token punctuation\">,</span> renderExpirationTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    workInProgress<span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> <span class=\"token function\">mountChildFibers</span><span class=\"token punctuation\">(</span>\n      workInProgress<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      nextChildren<span class=\"token punctuation\">,</span>\n      renderExpirationTime<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    workInProgress<span class=\"token punctuation\">.</span>child <span class=\"token operator\">=</span> <span class=\"token function\">reconcileChildFibers</span><span class=\"token punctuation\">(</span>\n      workInProgress<span class=\"token punctuation\">,</span>\n      current<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">,</span>\n      nextChildren<span class=\"token punctuation\">,</span>\n      renderExpirationTime<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>根据 current 是否存在 走不同的分支，<code class=\"language-text\">mountChildFibers</code>和<code class=\"language-text\">mountChildFibers</code>不同在于一个参数传递的问题。此时<code class=\"language-text\">current.child</code>为<code class=\"language-text\">null</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactChildFiber.js</span>\n<span class=\"token keyword\">const</span> reconcileChildFibers <span class=\"token operator\">=</span> <span class=\"token function\">ChildReconciler</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mountChildFibers <span class=\"token operator\">=</span> <span class=\"token function\">ChildReconciler</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>ChildReconciler</strong></p>\n<p><code class=\"language-text\">ChildReconciler</code>是一个高级函数，内部许多子方法，依次看来</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactChildFiber.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChildReconciler</span><span class=\"token punctuation\">(</span>shouldTrackSideEffects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">reconcileChildFibers</span><span class=\"token punctuation\">(</span>\n    returnFiber<span class=\"token punctuation\">,</span>\n    currentFirstChild<span class=\"token punctuation\">,</span>\n    newChild<span class=\"token punctuation\">,</span>\n    expirationTime\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Fragment相关内容 先跳过</span>\n    <span class=\"token keyword\">const</span> isUnkeyedTopLevelFragment <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">const</span> isObject <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> newChild <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> newChild <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>newChild<span class=\"token punctuation\">.</span>$$<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">REACT_ELEMENT_TYPE</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">placeSingleChild</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">reconcileSingleElement</span><span class=\"token punctuation\">(</span>\n              returnFiber<span class=\"token punctuation\">,</span>\n              currentFirstChild<span class=\"token punctuation\">,</span>\n              newChild<span class=\"token punctuation\">,</span>\n              expirationTime<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**  **/</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里暂不讨论 Fragment相关内容 直接将标志位<code class=\"language-text\">isUnkeyedTopLevelFragment</code>置为假。这里的newChild对应着 App组件，<code class=\"language-text\">isObject</code>为真，且<code class=\"language-text\">newChild.$$typeof === REACT_ELEMENT_TYPE</code>。</p>\n<p><strong>reconcileSingleElement placeSingleChild</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactChildFiber.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reconcileSingleElement</span><span class=\"token punctuation\">(</span>\n  returnFiber<span class=\"token punctuation\">,</span>\n  currentFirstChild<span class=\"token punctuation\">,</span>\n  element<span class=\"token punctuation\">,</span>\n  expirationTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>key\n  <span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> currentFirstChild\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">REACT_FRAGMENT_TYPE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> created <span class=\"token operator\">=</span> <span class=\"token function\">createFiberFromElement</span><span class=\"token punctuation\">(</span>\n      element<span class=\"token punctuation\">,</span>\n      returnFiber<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span>\n      expirationTime<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// to do</span>\n    <span class=\"token comment\">// created.ref = coerceRef(returnFiber, currentFirstChild, element);</span>\n    created<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span> <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> created<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">placeSingleChild</span><span class=\"token punctuation\">(</span>newFiber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldTrackSideEffects <span class=\"token operator\">&amp;&amp;</span> newFiber<span class=\"token punctuation\">.</span>alternate <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    newFiber<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">=</span> Placement<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> newFiber\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>App组件对应的 fiber节点在之前并不存在，所以这里创建fiber节点 并将fiber的父节点设为 root fiber节点。之后在<code class=\"language-text\">placeSingleChild</code>为fiber的<code class=\"language-text\">effectTag</code>打上 <code class=\"language-text\">Placement</code><br>\n返回到<code class=\"language-text\">beginWork</code>的<code class=\"language-text\">updateHostRoot</code>， 接着返回<code class=\"language-text\">workInProgress.child</code>，返回到<code class=\"language-text\">completeUnitOfWork</code>函数内，</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> next</code></pre></div>\n<p>返回的为新创建的App对应的 fiber，所以beginWork继续执行。</p>\n<p>回到刚才的<code class=\"language-text\">beginWork</code>。\n创建的Function Component组件fiber默认的tag为IndeterminateComponent，class Component会被指定为ClassComponent</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> fiber<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> fiberTag <span class=\"token operator\">=</span> IndeterminateComponent<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> resolvedType <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldConstruct</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fiberTag <span class=\"token operator\">=</span> ClassComponent<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fiberTag <span class=\"token operator\">=</span> HostComponent<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>回顾一下beginWork</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    didReceiveUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> IndeterminateComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">mountIndeterminateComponent</span><span class=\"token punctuation\">(</span>\n        current<span class=\"token punctuation\">,</span>\n        workInProgress<span class=\"token punctuation\">,</span>\n        workInProgress<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span>\n        renderExpirationTime<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>mountIndeterminateComponent大致代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountIndeterminateComponent</span><span class=\"token punctuation\">(</span>\n  _current<span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token punctuation\">,</span>\n  Component<span class=\"token punctuation\">,</span>\n  renderExpirationTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>pendingProps\n  \n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token function\">renderWithHooks</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    workInProgress<span class=\"token punctuation\">,</span>\n    Component<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    context<span class=\"token punctuation\">,</span>\n    renderExpirationTime<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">.</span>render <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    workInProgress<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">=</span> FunctionComponent<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的<code class=\"language-text\">renderWithHooks</code>先简单看成 <code class=\"language-text\">Component(props)</code>，后面部分介绍hooks相关代码。</p>\n<p>返回的value为:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token string\">\"12\"</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"12\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// value</span>\n<span class=\"token punctuation\">{</span>\n  $$<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">:</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>react<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">)</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"12\"</span>\n  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  ref<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  type<span class=\"token punctuation\">:</span> ƒ <span class=\"token function\">CounterButton</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">reconcileChildren</code> —> <code class=\"language-text\">mountChildFibers</code>为<code class=\"language-text\">Counter</code>组件创建fiber与创建App的fiber逻辑基本相同。所不同的是effectTag没有被标记。</p>\n<p><code class=\"language-text\">beginWork</code> <code class=\"language-text\">Counter</code>， renderWithHooks 返回的是div，接着创建下一次beginWork的fiber。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">{\n  $$typeof: Symbol(react.element)\n  key: null\n  props: {children: Array(2)}\n  ref: null\n  type: &quot;div&quot;\n}</code></pre></div>\n<p>beginWork: HostComponent</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">case</span> HostComponent<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">updateHostComponent</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactDOMHostConfig.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">shouldSetTextContent</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">:</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> boolean <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    type <span class=\"token operator\">===</span> <span class=\"token string\">'textarea'</span> <span class=\"token operator\">||</span>\n    type <span class=\"token operator\">===</span> <span class=\"token string\">'option'</span> <span class=\"token operator\">||</span>\n    type <span class=\"token operator\">===</span> <span class=\"token string\">'noscript'</span> <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">||</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> props<span class=\"token punctuation\">.</span>dangerouslySetInnerHTML <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span>\n      props<span class=\"token punctuation\">.</span>dangerouslySetInnerHTML <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n      props<span class=\"token punctuation\">.</span>dangerouslySetInnerHTML<span class=\"token punctuation\">.</span>__html <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ReactFiberBeginWork.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateHostComponent</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token punctuation\">,</span>\n  renderExpirationTime<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>type\n  <span class=\"token keyword\">const</span> nextProps <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>pendingProps\n  <span class=\"token keyword\">const</span> prevProps <span class=\"token operator\">=</span> current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> current<span class=\"token punctuation\">.</span>memoizedProps <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">let</span> nextChildren <span class=\"token operator\">=</span> nextProps<span class=\"token punctuation\">.</span>children\n  <span class=\"token keyword\">const</span> isDirectTextChild <span class=\"token operator\">=</span> <span class=\"token function\">shouldSetTextContent</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDirectTextChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nextChildren <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">reconcileChildren</span><span class=\"token punctuation\">(</span>\n    current<span class=\"token punctuation\">,</span>\n    workInProgress<span class=\"token punctuation\">,</span>\n    nextChildren<span class=\"token punctuation\">,</span>\n    renderExpirationTime<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的<code class=\"language-text\">pendingProps</code>，就是div的props 为 span button的数组。<br>\n<code class=\"language-text\">shouldSetTextContent</code>则判断当前元素可不可以拥有子元素，或者children可以作为一个text节点 之后继续调用 <code class=\"language-text\">reconcileChildren</code> —> <code class=\"language-text\">mountChildFibers</code></p>\n<p>此时nextChildren是一个数组结构  在<code class=\"language-text\">ReactFiberChild</code>中<code class=\"language-text\">reconcileChildFibers</code>相应的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>newChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">reconcileChildrenArray</span><span class=\"token punctuation\">(</span>\n    returnFiber<span class=\"token punctuation\">,</span>\n    currentFirstChild<span class=\"token punctuation\">,</span>\n    newChild<span class=\"token punctuation\">,</span>\n    expirationTime<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reconcileChildrenArray</span><span class=\"token punctuation\">(</span>\n  returnFiber<span class=\"token punctuation\">,</span>\n  currentFirstChild<span class=\"token punctuation\">,</span>\n  newChildren<span class=\"token punctuation\">,</span>\n  expirationTime<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> resultingFirstChild<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> previousNewFiber<span class=\"token punctuation\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> oldFiber <span class=\"token operator\">=</span> currentFirstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> lastPlacedIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> newIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nextOldFiber <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> oldFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> newIdx <span class=\"token operator\">&lt;</span> newChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> newIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newIdx <span class=\"token operator\">===</span> newChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldFiber <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> newIdx <span class=\"token operator\">&lt;</span> newChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> newIdx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> newFiber <span class=\"token operator\">=</span> <span class=\"token function\">createChild</span><span class=\"token punctuation\">(</span>\n        returnFiber<span class=\"token punctuation\">,</span>\n        newChildren<span class=\"token punctuation\">[</span>newIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        expirationTime<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newFiber <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      lastPlacedIndex <span class=\"token operator\">=</span> <span class=\"token function\">placeChild</span><span class=\"token punctuation\">(</span>newFiber<span class=\"token punctuation\">,</span> lastPlacedIndex<span class=\"token punctuation\">,</span> newIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousNewFiber <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// TODO: Move out of the loop. This only happens for the first run.</span>\n        resultingFirstChild <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        previousNewFiber<span class=\"token punctuation\">.</span>sibling <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      previousNewFiber <span class=\"token operator\">=</span> newFiber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> resultingFirstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由于第一次创建 此时的<code class=\"language-text\">currentFirstChild</code>为null，<code class=\"language-text\">reconcileChildrenArray</code>代码很多，但是第一次用到的不多，主要遍历children 为它们创建fiber，并添加到fiber树上。\n最后返回第一个child的fiber 也就是span对应的fiber。</p>\n<p>接着对 span进行<code class=\"language-text\">beginWork</code>， 此时的<code class=\"language-text\">isDirectTextChild</code>标志位为true。nextChildren则为null。<code class=\"language-text\">reconcileChildFibers</code>结果返回null。</p>\n<p>此时回到workLoop的<code class=\"language-text\">performUnitOfWork</code>，因为next为null，则进行下一步 <code class=\"language-text\">completeUnitOfWork</code>。</p>\n<h3>completeUnitOfWork</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>unitOfWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  workInProgress <span class=\"token operator\">=</span> unitOfWork\n  <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>alternate\n    <span class=\"token keyword\">const</span> returnFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">&amp;</span> Incomplete<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> NoEffect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> renderExpirationTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">...</span>\n      <span class=\"token comment\">/* completeUnitOfWork-code-01 */</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* completeUnitOfWork-code-02 */</span>\n    <span class=\"token keyword\">const</span> siblingFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siblingFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> siblingFiber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    workInProgress <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* completeUnitOfWork-code-02 */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此时传入的unitOfWork为span对应的fiber。 将全局变量<code class=\"language-text\">workInProgress</code>赋值为<code class=\"language-text\">unitWork</code></p>\n<p><code class=\"language-text\">(workInProgress.effectTag &amp; Incomplete) === NoEffect</code>显然为true。调用<code class=\"language-text\">completeWork</code>返回下一次的工作内容</p>\n<p><strong>completeWork</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>\n  current<span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token punctuation\">,</span>\n  renderExpirationTime\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newProps <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>pendingProps\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">case</span> HostComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> rootContainerInfo <span class=\"token operator\">=</span> <span class=\"token function\">getRootHostContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> workInProgress<span class=\"token punctuation\">.</span>stateNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> currentHostContext <span class=\"token operator\">=</span> <span class=\"token function\">getHostContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>\n          type<span class=\"token punctuation\">,</span>\n          newProps<span class=\"token punctuation\">,</span>\n          rootContainerInstance<span class=\"token punctuation\">,</span>\n          currentHostContext<span class=\"token punctuation\">,</span>\n          workInProgress<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">appendAllChildren</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> workInProgress<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token function\">finalizeInitialChildren</span><span class=\"token punctuation\">(</span>\n              instance<span class=\"token punctuation\">,</span>\n              type<span class=\"token punctuation\">,</span>\n              newProps<span class=\"token punctuation\">,</span>\n              rootContainerInstance<span class=\"token punctuation\">,</span>\n              currentHostContext<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">markUpdate</span><span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          workInProgress<span class=\"token punctuation\">.</span>stateNode <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此处的<code class=\"language-text\">rootContainerInfo</code>先把他认为是<code class=\"language-text\">div#app</code>，继续忽略<code class=\"language-text\">currentHostContext</code>。创建过程可以理解为三步：</p>\n<ol>\n<li>createInstance： 创建dom等</li>\n<li>appendAllChildren： 将children的host Component添加到刚创建的dom上 组成dom树。</li>\n<li>finalizeInitialChildren： 给dom设置属性。</li>\n</ol>\n<p>先详细看一下<code class=\"language-text\">createInstance</code>实现</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactDOMComponentTree.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateFiberProps</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token punctuation\">[</span>internalEventHandlersKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">precacheFiberNode</span><span class=\"token punctuation\">(</span>hostInst<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token punctuation\">[</span>internalInstanceKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hostInst<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ReactDOMHostConfig</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>\n  type<span class=\"token punctuation\">,</span>\n  props<span class=\"token punctuation\">,</span>\n  rootContainerInstance<span class=\"token punctuation\">,</span>\n  hostContext<span class=\"token punctuation\">,</span>\n  internalInstanceHandle\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> domElement<span class=\"token punctuation\">:</span> Instance <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    type<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    rootContainerInstance<span class=\"token punctuation\">,</span>\n    parentNamespace<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">precacheFiberNode</span><span class=\"token punctuation\">(</span>internalInstanceHandle<span class=\"token punctuation\">,</span> domElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateFiberProps</span><span class=\"token punctuation\">(</span>domElement<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> domElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">createElement</code>先暂时理解为 document.createElement<br>\n<code class=\"language-text\">precacheFiberNode</code>则是 将fiber实例添加到dom上。<br>\n<code class=\"language-text\">updateFiberProps</code> 将fiber实例添加到dom上  </p>\n<p>虽然是一样将fiber添加到dom上 通过key的命名可以发现用途不同，<code class=\"language-text\">updateFiberProps</code>是为事件系统做准备的。<code class=\"language-text\">internalInstanceKey</code>估计就是为了保持引用，取值判断等用途</p>\n<p><code class=\"language-text\">appendAllChildren</code> 这里先跳过，到complete div的时候具体分析一下。</p>\n<p>由于是第一次渲染也就不存在diff props的过程，这里的<code class=\"language-text\">finalizeInitialChildren</code>的职责也相对简单些，设置dom元素的一些初始值。在设置初始值的时候对应不同的dom元素有特殊的处理，这些部分我们也先跳过</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">finalizeInitialChildren</span><span class=\"token punctuation\">(</span>\n  domElement<span class=\"token punctuation\">:</span> Instance<span class=\"token punctuation\">,</span>\n  type<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n  props<span class=\"token punctuation\">:</span> Props<span class=\"token punctuation\">,</span>\n  rootContainerInstance<span class=\"token punctuation\">:</span> Container<span class=\"token punctuation\">,</span>\n  hostContext<span class=\"token punctuation\">:</span> HostContext<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> boolean <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setInitialProperties</span><span class=\"token punctuation\">(</span>domElement<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> rootContainerInstance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// return shouldAutoFocusHostComponent(type, props);</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setInitialProperties</span><span class=\"token punctuation\">(</span>\n  domElement<span class=\"token punctuation\">,</span>\n  tag<span class=\"token punctuation\">,</span>\n  rawProps<span class=\"token punctuation\">,</span>\n  rootContainerElement<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">const</span> isCustomComponentTag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setInitialDOMProperties</span><span class=\"token punctuation\">(</span>\n    tag<span class=\"token punctuation\">,</span>\n    domElement<span class=\"token punctuation\">,</span>\n    rootContainerElement<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    isCustomComponentTag<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setInitialDOMProperties</span><span class=\"token punctuation\">(</span>\n  tag<span class=\"token punctuation\">,</span>\n  domElement<span class=\"token punctuation\">,</span>\n  rootContainerElement<span class=\"token punctuation\">,</span>\n  nextProps<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> propKey <span class=\"token keyword\">in</span> nextProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextProps<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> nextProp <span class=\"token operator\">=</span> nextProps<span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propKey <span class=\"token operator\">===</span> <span class=\"token constant\">STYLE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propKey <span class=\"token operator\">===</span> <span class=\"token constant\">DANGEROUSLY_SET_INNER_HTML</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propKey <span class=\"token operator\">===</span> <span class=\"token constant\">CHILDREN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> nextProp <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> canSetTextContent <span class=\"token operator\">=</span> tag <span class=\"token operator\">!==</span> <span class=\"token string\">'textarea'</span> <span class=\"token operator\">||</span> nextProp <span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canSetTextContent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span>domElement<span class=\"token punctuation\">,</span> nextProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> nextProp <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTextContent</span><span class=\"token punctuation\">(</span>domElement<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> nextProp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registrationNameModules<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextProp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setValueForProperty</span><span class=\"token punctuation\">(</span>domElement<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">,</span> nextProp<span class=\"token punctuation\">,</span> isCustomComponentTag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在设置dom属性的时候，有几个注意点 一个是style属性的设置 最终的style属性是字符串，而我们写的则是属性名是驼峰命名的对象。感兴趣的可自行查看<a href=\"https://github.com/facebook/react/blob/v16.9.0/packages/react-dom/src/shared/CSSPropertyOperations.js#L62\">setValueForStyles</a>。</p>\n<p>span的children属性是被当做文字节点设置</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// setTextContent.js</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> firstChild <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      firstChild <span class=\"token operator\">&amp;&amp;</span>\n      firstChild <span class=\"token operator\">===</span> node<span class=\"token punctuation\">.</span>lastChild <span class=\"token operator\">&amp;&amp;</span>\n      firstChild<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token constant\">TEXT_NODE</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  node<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>回到<code class=\"language-text\">completeWork</code>，最后将创建的dom添加到fiber的<code class=\"language-text\">stateNode</code>属性上，返回null 结束<code class=\"language-text\">completeWork</code>调用</p>\n<p>返回到<code class=\"language-text\">completeUnitOfWork</code>的<code class=\"language-text\">/* completeUnitOfWork-code-01 */</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* completeUnitOfWork-code-01 */</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n  returnFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span>\n  <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">&amp;</span> Incomplete<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> NoEffect\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">.</span>effect <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    returnFiber<span class=\"token punctuation\">.</span>firstEffect <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>firstEffect\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      returnFiber<span class=\"token punctuation\">.</span>lastEffect<span class=\"token punctuation\">.</span>nextEffect <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>firstEffect<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    returnFiber<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>lastEffect<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> effectTag <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>effectTag<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectTag <span class=\"token operator\">></span> PerformedWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      returnFiber<span class=\"token punctuation\">.</span>lastEffect<span class=\"token punctuation\">.</span>nextEffect <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      returnFiber<span class=\"token punctuation\">.</span>firstEffect <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    returnFiber<span class=\"token punctuation\">.</span>lastEffect <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>将span节点的 effectList归并到父组件上（但此时span fiber上并没有effect）, 此时子组件没有任何effect，且 effectTag 为 0。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* completeUnitOfWork-code-02 */</span>\n<span class=\"token keyword\">const</span> siblingFiber <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siblingFiber <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> siblingFiber<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nworkInProgress <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* completeUnitOfWork-code-02 */</span></code></pre></div>\n<p><code class=\"language-text\">/* completeUnitOfWork-code-02 */</code>，如果当前节点有兄弟节点，则返回，没有则返回父节点继续 completeWork。<br>\n此时span有一个创建了fiber但是没有进行beginWork的兄弟节点<code class=\"language-text\">button</code>。</p>\n<p>button节点经历过<code class=\"language-text\">beginWork</code>, <code class=\"language-text\">completeWork</code>，又回到了<code class=\"language-text\">/* completeUnitOfWork-code-02 */</code>处。button 节点没有兄弟节点，workInProgress被置为了 div 节点，进行\ndiv的 <code class=\"language-text\">completeWork</code>。</p>\n<p>div的completeWork与 span和button不同之处在于<code class=\"language-text\">appendAllChildren</code>，之前跳过的部分现在分析一下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">appendAllChildren</span><span class=\"token punctuation\">(</span>\n  parent<span class=\"token punctuation\">,</span>\n  workInProgress<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">===</span> HostComponent <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">===</span> HostText<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// condition 01</span>\n      <span class=\"token function\">appendInitialChild</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>stateNode<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>child <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// condition 03</span>\n      node<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n      node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">===</span> workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// condition 04</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>sibling <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span> <span class=\"token operator\">===</span> workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    node<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>div的child为 span且满足 <code class=\"language-text\">condition 01</code>，将span添加到div上，轮到button fiber 同样将 button 添加到div 上。\n<code class=\"language-text\">condition 04</code>处 是当前的返回出口：找到最后一个sibling，在向上查找到 div节点 返回。</p>\n<p>我们实际应用中，上述的 div>span-button 算是最简单操作。有很多想 div 与 span、button 又隔了一层Function/Class Component。此时就需要利用到\n<code class=\"language-text\">condition 03</code> 继续向child查找，查找各个分叉向下距离<code class=\"language-text\">workInProgress</code>最近的host节点，将他们添加到<code class=\"language-text\">workInProgress</code>对应的dom上，这样dom树才能完整构成。</p>\n<p>这样 div<code class=\"language-text\">completeWork</code>就完成了，继续到<code class=\"language-text\">Counter</code>组件：</p>\n<p><code class=\"language-text\">Component</code>组件的<code class=\"language-text\">completeWork</code>是直接被<code class=\"language-text\">break</code>，所以这里只需要将effectList归并到父节点。</p>\n<p>由<code class=\"language-text\">/* completeUnitOfWork-code-02 */</code>节点到<code class=\"language-text\">Counter</code>的returnFiber<code class=\"language-text\">App</code> 节点，App节点与其他节点不同的地方在于其<code class=\"language-text\">effectTag</code>为3。这是怎么来的尼？还记得我们的 root fiber节点在<code class=\"language-text\">beginWork</code>时与其他节点不同的地方在于：它是有 <code class=\"language-text\">current</code>节点的，所以作为children的App，在<a href=\"https://github.com/facebook/react/blob/v16.9.0/packages/react-reconciler/src/ReactChildFiber.js#L348\"><code class=\"language-text\">placeSingleChild</code></a>的时候<code class=\"language-text\">effectTag</code>被添加了<code class=\"language-text\">Placement</code>，在<code class=\"language-text\">beginWork</code>的<a href=\"https://github.com/facebook/react/blob/v16.9.0/packages/react-reconciler/src/ReactFiberBeginWork.js#L1293\"><code class=\"language-text\">mountIndeterminateComponent</code></a>时，<code class=\"language-text\">Component</code>组件的<code class=\"language-text\">effectTag</code>被添加了<code class=\"language-text\">PerformedWork</code>。</p>\n<p>回归一下<code class=\"language-text\">/* completeUnitOfWork-code-01 */</code>处代码，只有到App满足<code class=\"language-text\">effectTag &gt; PerformedWork</code>，在之前出现的 host 节点的<code class=\"language-text\">effectTag</code> 都为0，<code class=\"language-text\">Function</code>节点都为 1（<code class=\"language-text\">PerformedWork</code>），都不符合添加effect的要求。所以到此时才有一个<code class=\"language-text\">effect</code>，它被添加到了root Fiber上。</p>\n<p>root fiber的<code class=\"language-text\">completeWork</code>，它的<code class=\"language-text\">tag</code>为 <code class=\"language-text\">HostRoot</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberCompleteWork.js</span>\n\n<span class=\"token function-variable function\">updateHostContainer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>workInProgress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Noop</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">case</span> HostRoot<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> current<span class=\"token punctuation\">.</span>child <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    workInProgress<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>Placement<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// updateHostContainer(workInProgress)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里current.child为null，因为我们之前beginWork时，改变的是workInProgress节点，这里将<code class=\"language-text\">Placement effectTag</code>取消。结束 completeWork。</p>\n<p>这时我们已经到达了root节点，做一些收尾工作</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactWorkLoop.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>unitOfWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  workInProgress <span class=\"token operator\">=</span> unitOfWork\n  <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workInProgressRootExitStatus <span class=\"token operator\">===</span> RootIncomplete<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    workInProgressRootExitStatus <span class=\"token operator\">=</span> RootCompleted<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">workLoopSync</code>结束之后，将执行上下文由<code class=\"language-text\">RenderContext</code>重置为上次的执行环境</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">root<span class=\"token punctuation\">.</span>finishedWork <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span>finishedExpirationTime <span class=\"token operator\">=</span> expirationTime<span class=\"token punctuation\">;</span></code></pre></div>\n<p>之后将<code class=\"language-text\">workLoop</code>所做的工作添加到root的<code class=\"language-text\">finishedWork</code>上</p>\n<p><code class=\"language-text\">workLoopSync</code>部分， 也可以成为render阶段到此结束。回顾一下在此期间所做的主要工作。</p>\n<ul>\n<li>创建各个节点对应的workInProgress fiber节点</li>\n<li>创建dom节点，设置属性，连接构成dom树（并未append到container上）</li>\n<li>为节点打上effectTag，构建完整的effectList链表，从叶子节点归并到root fiber节点上。</li>\n</ul>\n<h2>commit阶段</h2>\n<p>继续回来<code class=\"language-text\">renderRoot</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  workInProgressRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>workInProgressRootExitStatus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> RootComplete<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n      <span class=\"token keyword\">return</span> commitRoot<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>将<code class=\"language-text\">workInProgressRoot</code>置为null，在completeWork时将<code class=\"language-text\">workInProgressRootExitStatus</code>置为了<code class=\"language-text\">RootCompleted</code>，之后进入commitRoot阶段。</p>\n<p>暂不讨论优先级调度相关的代码,<a href=\"https://github.com/facebook/react/blob/v16.9.0/packages/react-reconciler/src/ReactFiberWorkLoop.js#L1515\">完整代码戳我</a> 这里看成：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  commitRootImpl<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> renderPriorityLevel<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootWithPendingPassiveEffects <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">flushPassiveEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>commitBeforeMutationEffects</li>\n<li>commitMutationEffects</li>\n<li>commitLayoutEffects\ncommitRoot源码主要内容是以上遍历<code class=\"language-text\">effectList</code>的三个循环，看看他们做了什么吧</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">let nextEffect = null\n\nfunction commitRootImpl(root, renderPriorityLevel) {\n\tconst finishWork = root.finishWork\n\tconst expirationTime = root.finishedExpirationTime\n\t...\n\n\troot.finishedWork = null;\n\troot.finishedExpirationTime = NoWork;\n\t\n\tlet firstEffect\n\tif (finishedWork.effectTag &gt; PerformedWork) {\n\t\t// 将自身effect添加到effect list上\n\t\t...\n\t}\n\n\tif (firstEffect !== null) {\n\t\tconst prevExecutionContext = executionContext;\n\t\texecutionContext |= CommitContext;\n\t\t\n\t\tdo {\n\t\t\ttry {\n\t\t\t\tcommitBeforeMutationEffects();\n\t\t\t} catch (error) {\n\t\t\t\t..\n\t\t\t}\n\t\t} while (nextEffect !== null)\n\n\t\t...\n\n\t\t...\n\t\tnextEffect = null;\n\t\texecutionContext = prevExecutionContext;\n\t}\n\n}</code></pre></div>\n<p>先获取effectList，在render阶段生成的effect list并不包含自身的effect，这里先添加（但此时finishedWork.effectTag其实为0），获取完整的effectList。\n之后把当前的执行上下文置为<code class=\"language-text\">CommitContext</code>, 正式进入commit阶段。</p>\n<p>此时<code class=\"language-text\">effectList</code>其实就是App节点的<code class=\"language-text\">workInProgress fiber</code>。这里有一个全局变量<code class=\"language-text\">nextEffect</code>表示当前正在处理的effect</p>\n<p><strong>commitBeforeMutationEffects</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitBeforeMutationEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextEffect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nextEffect<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">&amp;</span> Snapshot<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> NoEffect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token operator\">...</span>\n\t\t\t<span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">commitBeforeMutationEffectOnFiber</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> nextEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">...</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tnextEffect <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>nextEffect<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个App fiber上的<code class=\"language-text\">effectTag</code>为 3 （Placement | Update）,这个循环直接跳过了</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitMutationEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextEffect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> effectTag <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>effectTag\n\t\t<span class=\"token operator\">...</span>\n\n\t\t<span class=\"token keyword\">let</span> primaryEffectTag <span class=\"token operator\">=</span> effectTag <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>Placement <span class=\"token operator\">|</span> Update <span class=\"token operator\">|</span> Deletion<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>primaryEffectTag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token operator\">...</span>\n\t\t\t<span class=\"token keyword\">case</span> PlacementAndUpdate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">commitPlacement</span><span class=\"token punctuation\">(</span>nextEffect<span class=\"token punctuation\">)</span>\n\t\t\t\tnextEffect<span class=\"token punctuation\">.</span>effectTag <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>Placement<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Update</span>\n        <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> nextEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tnextEffect <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>nextEffect<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>commitPlacement</strong></p>\n<p><a href=\"https://github.com/facebook/react/blob/v16.9.0/packages/react-reconciler/src/ReactFiberCommitWork.js#L995\"><code class=\"language-text\">commitPlacement</code></a>主要是把dom元素添加到对应的父节点上，对于第一次渲染其实也只是将div添加到<code class=\"language-text\">div#app</code>上。并将当前的<code class=\"language-text\">effectTag update</code>去掉。</p>\n<p><strong>commitWork</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberCommitWork.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> finishedWork<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>finishedWork<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> FunctionComponent<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">case</span> ForwardRef<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">case</span> MemoComponent<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">case</span> SimpleMemoComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Note: We currently never use MountMutation, but useLayout uses</span>\n      <span class=\"token comment\">// UnmountMutation.</span>\n      <span class=\"token function\">commitHookEffectList</span><span class=\"token punctuation\">(</span>UnmountMutation<span class=\"token punctuation\">,</span> MountMutation<span class=\"token punctuation\">,</span> finishedWork<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">case</span> HostComponent<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token operator\">...</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里commitWork有涉及到hook组件的部分，这里暂时跳过。\n对于 host组件其实是有前后props diff的部分，这里是第一次渲染，所以也就不存在，所以这里也没有多少第一渲染需要做的工作。</p>\n<p><strong>commitLayoutEffects</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ReactFiberWorkLoop.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> commitLifeCycles <span class=\"token keyword\">as</span> commitLayoutEffectOnFiber <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ReactFiberCommitWork'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">commitLayoutEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextEffect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> effectTag <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>effectTag<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>effectTag <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>Update <span class=\"token operator\">|</span> Callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">recordEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>alternate<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">commitLayoutEffectOnFiber</span><span class=\"token punctuation\">(</span>\n        root<span class=\"token punctuation\">,</span>\n        current<span class=\"token punctuation\">,</span>\n        nextEffect<span class=\"token punctuation\">,</span>\n        committedExpirationTime<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">...</span>\n\t\tnextEffect <span class=\"token operator\">=</span> nextEffect<span class=\"token punctuation\">.</span>nextEffect\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>App fiber上的effectTag现在剩下1(PerformedWork)，并不符合所以当当循环也跳出。顺便一提，如果我们的ReactDOM.render有callback的话 将会在这里执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">三个循环结束之后将nextEffect置为null；执行上下文变更成之前的执行上下文。</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">commitRootImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>executionContext <span class=\"token operator\">&amp;</span> LegacyUnbatchedContext<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> NoContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在我们的执行上下文还剩下在<code class=\"language-text\">upbatchedUpdate</code>添加的<code class=\"language-text\">LegacyUnbatchedContext</code>，所以这里直接返回。到这里我们第一渲染过程到这也就基本结束了。</p>\n<p>总结一下commit工作：</p>\n<ol>\n<li>处理beginWork产出 finishedWork的effectList</li>\n<li>将dom添加到屏幕上（div#app container）</li>\n<li>callback调用</li>\n<li>hooks相关逻辑（未涉及）</li>\n<li>classComponent的生命周期逻辑（未涉及）</li>\n<li>其他</li>\n</ol>\n<p>本文在走源码的时候也有有许多部分没有涵盖 或者直接跳过的地方：</p>\n<ul>\n<li>更新过程 hooks组件更新 classComponent setState更新</li>\n<li>Hooks</li>\n<li>ClassComponent、 SimpleMemoComponent、HostPortal、SuspenseComponent、SuspenseListComponent等</li>\n<li>事件相关</li>\n<li>context ref 等</li>\n<li>scheduler模块</li>\n<li>其他</li>\n</ul>\n<h2>尾声</h2>\n<p>本文是笔者跟着源码debugger写出来的文章，对于缺失的部分，计划慢慢会有对应的介绍部分。另外本文属于流水账类型的文章，分析部分非常少，忘大家多多包涵、提提意见，你的参与就是我的动力。</p>","timeToRead":20,"frontmatter":{"title":"React的第一次渲染过程浅析","date":"September 27, 2019","spoiler":"React的第一次渲染过程浅析"},"fields":{"slug":"/fiber-first-render-simple-analysis/"}}},"pageContext":{"slug":"/fiber-first-render-simple-analysis/","previous":{"fields":{"slug":"/use-sub-pub-in-react/"},"frontmatter":{"title":"react 中发布订阅模式使用"}},"next":null}}